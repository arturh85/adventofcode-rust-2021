<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="31120"><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (60 samples, 0.19%)</title><rect x="0.0000%" y="357" width="0.1928%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="60"/><text x="0.2500%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (60 samples, 0.19%)</title><rect x="0.0000%" y="341" width="0.1928%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="60"/><text x="0.2500%" y="351.50"></text></g><g><title>criterion::analysis::estimates::stats (60 samples, 0.19%)</title><rect x="0.0000%" y="325" width="0.1928%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="60"/><text x="0.2500%" y="335.50"></text></g><g><title>rayon::slice::quicksort::recurse (60 samples, 0.19%)</title><rect x="0.0000%" y="309" width="0.1928%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="60"/><text x="0.2500%" y="319.50"></text></g><g><title>rayon::slice::quicksort::recurse (60 samples, 0.19%)</title><rect x="0.0000%" y="293" width="0.1928%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="60"/><text x="0.2500%" y="303.50"></text></g><g><title>rayon::slice::quicksort::recurse (9 samples, 0.03%)</title><rect x="0.1639%" y="277" width="0.0289%" height="15" fill="rgb(232,128,0)" fg:x="51" fg:w="9"/><text x="0.4139%" y="287.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (61 samples, 0.20%)</title><rect x="0.0000%" y="389" width="0.1960%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="61"/><text x="0.2500%" y="399.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (61 samples, 0.20%)</title><rect x="0.0000%" y="373" width="0.1960%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="61"/><text x="0.2500%" y="383.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (133 samples, 0.43%)</title><rect x="0.0000%" y="437" width="0.4274%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="133"/><text x="0.2500%" y="447.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (133 samples, 0.43%)</title><rect x="0.0000%" y="421" width="0.4274%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="133"/><text x="0.2500%" y="431.50"></text></g><g><title>rayon_core::registry::in_worker (133 samples, 0.43%)</title><rect x="0.0000%" y="405" width="0.4274%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="133"/><text x="0.2500%" y="415.50"></text></g><g><title>std::panicking::try (72 samples, 0.23%)</title><rect x="0.1960%" y="389" width="0.2314%" height="15" fill="rgb(240,193,28)" fg:x="61" fg:w="72"/><text x="0.4460%" y="399.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (72 samples, 0.23%)</title><rect x="0.1960%" y="373" width="0.2314%" height="15" fill="rgb(216,20,37)" fg:x="61" fg:w="72"/><text x="0.4460%" y="383.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (72 samples, 0.23%)</title><rect x="0.1960%" y="357" width="0.2314%" height="15" fill="rgb(206,188,39)" fg:x="61" fg:w="72"/><text x="0.4460%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (72 samples, 0.23%)</title><rect x="0.1960%" y="341" width="0.2314%" height="15" fill="rgb(217,207,13)" fg:x="61" fg:w="72"/><text x="0.4460%" y="351.50"></text></g><g><title>criterion::analysis::estimates::stats (72 samples, 0.23%)</title><rect x="0.1960%" y="325" width="0.2314%" height="15" fill="rgb(231,73,38)" fg:x="61" fg:w="72"/><text x="0.4460%" y="335.50"></text></g><g><title>rayon::slice::quicksort::recurse (72 samples, 0.23%)</title><rect x="0.1960%" y="309" width="0.2314%" height="15" fill="rgb(225,20,46)" fg:x="61" fg:w="72"/><text x="0.4460%" y="319.50"></text></g><g><title>rayon::slice::quicksort::recurse (72 samples, 0.23%)</title><rect x="0.1960%" y="293" width="0.2314%" height="15" fill="rgb(210,31,41)" fg:x="61" fg:w="72"/><text x="0.4460%" y="303.50"></text></g><g><title>rayon::slice::quicksort::recurse (18 samples, 0.06%)</title><rect x="0.3695%" y="277" width="0.0578%" height="15" fill="rgb(221,200,47)" fg:x="115" fg:w="18"/><text x="0.6195%" y="287.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (67 samples, 0.22%)</title><rect x="0.4274%" y="389" width="0.2153%" height="15" fill="rgb(226,26,5)" fg:x="133" fg:w="67"/><text x="0.6774%" y="399.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (67 samples, 0.22%)</title><rect x="0.4274%" y="373" width="0.2153%" height="15" fill="rgb(249,33,26)" fg:x="133" fg:w="67"/><text x="0.6774%" y="383.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (67 samples, 0.22%)</title><rect x="0.4274%" y="357" width="0.2153%" height="15" fill="rgb(235,183,28)" fg:x="133" fg:w="67"/><text x="0.6774%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (67 samples, 0.22%)</title><rect x="0.4274%" y="341" width="0.2153%" height="15" fill="rgb(221,5,38)" fg:x="133" fg:w="67"/><text x="0.6774%" y="351.50"></text></g><g><title>criterion::analysis::estimates::stats (67 samples, 0.22%)</title><rect x="0.4274%" y="325" width="0.2153%" height="15" fill="rgb(247,18,42)" fg:x="133" fg:w="67"/><text x="0.6774%" y="335.50"></text></g><g><title>rayon::slice::quicksort::recurse (67 samples, 0.22%)</title><rect x="0.4274%" y="309" width="0.2153%" height="15" fill="rgb(241,131,45)" fg:x="133" fg:w="67"/><text x="0.6774%" y="319.50"></text></g><g><title>rayon::slice::quicksort::recurse (67 samples, 0.22%)</title><rect x="0.4274%" y="293" width="0.2153%" height="15" fill="rgb(249,31,29)" fg:x="133" fg:w="67"/><text x="0.6774%" y="303.50"></text></g><g><title>rayon::slice::quicksort::recurse (18 samples, 0.06%)</title><rect x="0.5848%" y="277" width="0.0578%" height="15" fill="rgb(225,111,53)" fg:x="182" fg:w="18"/><text x="0.8348%" y="287.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (272 samples, 0.87%)</title><rect x="0.0000%" y="469" width="0.8740%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="272"/><text x="0.2500%" y="479.50"></text></g><g><title>rayon_core::registry::in_worker (272 samples, 0.87%)</title><rect x="0.0000%" y="453" width="0.8740%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="272"/><text x="0.2500%" y="463.50"></text></g><g><title>std::panicking::try (139 samples, 0.45%)</title><rect x="0.4274%" y="437" width="0.4467%" height="15" fill="rgb(232,36,49)" fg:x="133" fg:w="139"/><text x="0.6774%" y="447.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (139 samples, 0.45%)</title><rect x="0.4274%" y="421" width="0.4467%" height="15" fill="rgb(209,103,24)" fg:x="133" fg:w="139"/><text x="0.6774%" y="431.50"></text></g><g><title>rayon_core::registry::in_worker (139 samples, 0.45%)</title><rect x="0.4274%" y="405" width="0.4467%" height="15" fill="rgb(229,88,8)" fg:x="133" fg:w="139"/><text x="0.6774%" y="415.50"></text></g><g><title>std::panicking::try (72 samples, 0.23%)</title><rect x="0.6427%" y="389" width="0.2314%" height="15" fill="rgb(213,181,19)" fg:x="200" fg:w="72"/><text x="0.8927%" y="399.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (72 samples, 0.23%)</title><rect x="0.6427%" y="373" width="0.2314%" height="15" fill="rgb(254,191,54)" fg:x="200" fg:w="72"/><text x="0.8927%" y="383.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (72 samples, 0.23%)</title><rect x="0.6427%" y="357" width="0.2314%" height="15" fill="rgb(241,83,37)" fg:x="200" fg:w="72"/><text x="0.8927%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (72 samples, 0.23%)</title><rect x="0.6427%" y="341" width="0.2314%" height="15" fill="rgb(233,36,39)" fg:x="200" fg:w="72"/><text x="0.8927%" y="351.50"></text></g><g><title>criterion::analysis::estimates::stats (72 samples, 0.23%)</title><rect x="0.6427%" y="325" width="0.2314%" height="15" fill="rgb(226,3,54)" fg:x="200" fg:w="72"/><text x="0.8927%" y="335.50"></text></g><g><title>rayon::slice::quicksort::recurse (72 samples, 0.23%)</title><rect x="0.6427%" y="309" width="0.2314%" height="15" fill="rgb(245,192,40)" fg:x="200" fg:w="72"/><text x="0.8927%" y="319.50"></text></g><g><title>rayon::slice::quicksort::recurse (72 samples, 0.23%)</title><rect x="0.6427%" y="293" width="0.2314%" height="15" fill="rgb(238,167,29)" fg:x="200" fg:w="72"/><text x="0.8927%" y="303.50"></text></g><g><title>rayon::slice::quicksort::recurse (15 samples, 0.05%)</title><rect x="0.8258%" y="277" width="0.0482%" height="15" fill="rgb(232,182,51)" fg:x="257" fg:w="15"/><text x="1.0758%" y="287.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (9 samples, 0.03%)</title><rect x="0.8805%" y="261" width="0.0289%" height="15" fill="rgb(231,60,39)" fg:x="274" fg:w="9"/><text x="1.1305%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (9 samples, 0.03%)</title><rect x="0.8805%" y="245" width="0.0289%" height="15" fill="rgb(208,69,12)" fg:x="274" fg:w="9"/><text x="1.1305%" y="255.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (9 samples, 0.03%)</title><rect x="0.8805%" y="229" width="0.0289%" height="15" fill="rgb(235,93,37)" fg:x="274" fg:w="9"/><text x="1.1305%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 0.03%)</title><rect x="0.8805%" y="213" width="0.0289%" height="15" fill="rgb(213,116,39)" fg:x="274" fg:w="9"/><text x="1.1305%" y="223.50"></text></g><g><title>criterion::stats::bivariate::resamples::Resamples&lt;X,Y&gt;::next (9 samples, 0.03%)</title><rect x="0.8805%" y="197" width="0.0289%" height="15" fill="rgb(222,207,29)" fg:x="274" fg:w="9"/><text x="1.1305%" y="207.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (17 samples, 0.05%)</title><rect x="0.8805%" y="309" width="0.0546%" height="15" fill="rgb(206,96,30)" fg:x="274" fg:w="17"/><text x="1.1305%" y="319.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (17 samples, 0.05%)</title><rect x="0.8805%" y="293" width="0.0546%" height="15" fill="rgb(218,138,4)" fg:x="274" fg:w="17"/><text x="1.1305%" y="303.50"></text></g><g><title>rayon_core::registry::in_worker (17 samples, 0.05%)</title><rect x="0.8805%" y="277" width="0.0546%" height="15" fill="rgb(250,191,14)" fg:x="274" fg:w="17"/><text x="1.1305%" y="287.50"></text></g><g><title>std::panicking::try (8 samples, 0.03%)</title><rect x="0.9094%" y="261" width="0.0257%" height="15" fill="rgb(239,60,40)" fg:x="283" fg:w="8"/><text x="1.1594%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (8 samples, 0.03%)</title><rect x="0.9094%" y="245" width="0.0257%" height="15" fill="rgb(206,27,48)" fg:x="283" fg:w="8"/><text x="1.1594%" y="255.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (8 samples, 0.03%)</title><rect x="0.9094%" y="229" width="0.0257%" height="15" fill="rgb(225,35,8)" fg:x="283" fg:w="8"/><text x="1.1594%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.03%)</title><rect x="0.9094%" y="213" width="0.0257%" height="15" fill="rgb(250,213,24)" fg:x="283" fg:w="8"/><text x="1.1594%" y="223.50"></text></g><g><title>criterion::stats::bivariate::resamples::Resamples&lt;X,Y&gt;::next (8 samples, 0.03%)</title><rect x="0.9094%" y="197" width="0.0257%" height="15" fill="rgb(247,123,22)" fg:x="283" fg:w="8"/><text x="1.1594%" y="207.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (8 samples, 0.03%)</title><rect x="0.9351%" y="261" width="0.0257%" height="15" fill="rgb(231,138,38)" fg:x="291" fg:w="8"/><text x="1.1851%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (8 samples, 0.03%)</title><rect x="0.9351%" y="245" width="0.0257%" height="15" fill="rgb(231,145,46)" fg:x="291" fg:w="8"/><text x="1.1851%" y="255.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (8 samples, 0.03%)</title><rect x="0.9351%" y="229" width="0.0257%" height="15" fill="rgb(251,118,11)" fg:x="291" fg:w="8"/><text x="1.1851%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.03%)</title><rect x="0.9351%" y="213" width="0.0257%" height="15" fill="rgb(217,147,25)" fg:x="291" fg:w="8"/><text x="1.1851%" y="223.50"></text></g><g><title>criterion::stats::bivariate::resamples::Resamples&lt;X,Y&gt;::next (8 samples, 0.03%)</title><rect x="0.9351%" y="197" width="0.0257%" height="15" fill="rgb(247,81,37)" fg:x="291" fg:w="8"/><text x="1.1851%" y="207.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (33 samples, 0.11%)</title><rect x="0.8805%" y="357" width="0.1060%" height="15" fill="rgb(209,12,38)" fg:x="274" fg:w="33"/><text x="1.1305%" y="367.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (33 samples, 0.11%)</title><rect x="0.8805%" y="341" width="0.1060%" height="15" fill="rgb(227,1,9)" fg:x="274" fg:w="33"/><text x="1.1305%" y="351.50"></text></g><g><title>rayon_core::registry::in_worker (33 samples, 0.11%)</title><rect x="0.8805%" y="325" width="0.1060%" height="15" fill="rgb(248,47,43)" fg:x="274" fg:w="33"/><text x="1.1305%" y="335.50"></text></g><g><title>std::panicking::try (16 samples, 0.05%)</title><rect x="0.9351%" y="309" width="0.0514%" height="15" fill="rgb(221,10,30)" fg:x="291" fg:w="16"/><text x="1.1851%" y="319.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (16 samples, 0.05%)</title><rect x="0.9351%" y="293" width="0.0514%" height="15" fill="rgb(210,229,1)" fg:x="291" fg:w="16"/><text x="1.1851%" y="303.50"></text></g><g><title>rayon_core::registry::in_worker (16 samples, 0.05%)</title><rect x="0.9351%" y="277" width="0.0514%" height="15" fill="rgb(222,148,37)" fg:x="291" fg:w="16"/><text x="1.1851%" y="287.50"></text></g><g><title>std::panicking::try (8 samples, 0.03%)</title><rect x="0.9608%" y="261" width="0.0257%" height="15" fill="rgb(234,67,33)" fg:x="299" fg:w="8"/><text x="1.2108%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (8 samples, 0.03%)</title><rect x="0.9608%" y="245" width="0.0257%" height="15" fill="rgb(247,98,35)" fg:x="299" fg:w="8"/><text x="1.2108%" y="255.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (8 samples, 0.03%)</title><rect x="0.9608%" y="229" width="0.0257%" height="15" fill="rgb(247,138,52)" fg:x="299" fg:w="8"/><text x="1.2108%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.03%)</title><rect x="0.9608%" y="213" width="0.0257%" height="15" fill="rgb(213,79,30)" fg:x="299" fg:w="8"/><text x="1.2108%" y="223.50"></text></g><g><title>criterion::stats::bivariate::resamples::Resamples&lt;X,Y&gt;::next (8 samples, 0.03%)</title><rect x="0.9608%" y="197" width="0.0257%" height="15" fill="rgb(246,177,23)" fg:x="299" fg:w="8"/><text x="1.2108%" y="207.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (9 samples, 0.03%)</title><rect x="0.9865%" y="261" width="0.0289%" height="15" fill="rgb(230,62,27)" fg:x="307" fg:w="9"/><text x="1.2365%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (9 samples, 0.03%)</title><rect x="0.9865%" y="245" width="0.0289%" height="15" fill="rgb(216,154,8)" fg:x="307" fg:w="9"/><text x="1.2365%" y="255.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (9 samples, 0.03%)</title><rect x="0.9865%" y="229" width="0.0289%" height="15" fill="rgb(244,35,45)" fg:x="307" fg:w="9"/><text x="1.2365%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 0.03%)</title><rect x="0.9865%" y="213" width="0.0289%" height="15" fill="rgb(251,115,12)" fg:x="307" fg:w="9"/><text x="1.2365%" y="223.50"></text></g><g><title>criterion::stats::bivariate::resamples::Resamples&lt;X,Y&gt;::next (9 samples, 0.03%)</title><rect x="0.9865%" y="197" width="0.0289%" height="15" fill="rgb(240,54,50)" fg:x="307" fg:w="9"/><text x="1.2365%" y="207.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (17 samples, 0.05%)</title><rect x="0.9865%" y="309" width="0.0546%" height="15" fill="rgb(233,84,52)" fg:x="307" fg:w="17"/><text x="1.2365%" y="319.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (17 samples, 0.05%)</title><rect x="0.9865%" y="293" width="0.0546%" height="15" fill="rgb(207,117,47)" fg:x="307" fg:w="17"/><text x="1.2365%" y="303.50"></text></g><g><title>rayon_core::registry::in_worker (17 samples, 0.05%)</title><rect x="0.9865%" y="277" width="0.0546%" height="15" fill="rgb(249,43,39)" fg:x="307" fg:w="17"/><text x="1.2365%" y="287.50"></text></g><g><title>std::panicking::try (8 samples, 0.03%)</title><rect x="1.0154%" y="261" width="0.0257%" height="15" fill="rgb(209,38,44)" fg:x="316" fg:w="8"/><text x="1.2654%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (8 samples, 0.03%)</title><rect x="1.0154%" y="245" width="0.0257%" height="15" fill="rgb(236,212,23)" fg:x="316" fg:w="8"/><text x="1.2654%" y="255.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (8 samples, 0.03%)</title><rect x="1.0154%" y="229" width="0.0257%" height="15" fill="rgb(242,79,21)" fg:x="316" fg:w="8"/><text x="1.2654%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.03%)</title><rect x="1.0154%" y="213" width="0.0257%" height="15" fill="rgb(211,96,35)" fg:x="316" fg:w="8"/><text x="1.2654%" y="223.50"></text></g><g><title>criterion::stats::bivariate::resamples::Resamples&lt;X,Y&gt;::next (8 samples, 0.03%)</title><rect x="1.0154%" y="197" width="0.0257%" height="15" fill="rgb(253,215,40)" fg:x="316" fg:w="8"/><text x="1.2654%" y="207.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (9 samples, 0.03%)</title><rect x="1.0411%" y="261" width="0.0289%" height="15" fill="rgb(211,81,21)" fg:x="324" fg:w="9"/><text x="1.2911%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (9 samples, 0.03%)</title><rect x="1.0411%" y="245" width="0.0289%" height="15" fill="rgb(208,190,38)" fg:x="324" fg:w="9"/><text x="1.2911%" y="255.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (9 samples, 0.03%)</title><rect x="1.0411%" y="229" width="0.0289%" height="15" fill="rgb(235,213,38)" fg:x="324" fg:w="9"/><text x="1.2911%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 0.03%)</title><rect x="1.0411%" y="213" width="0.0289%" height="15" fill="rgb(237,122,38)" fg:x="324" fg:w="9"/><text x="1.2911%" y="223.50"></text></g><g><title>criterion::stats::bivariate::resamples::Resamples&lt;X,Y&gt;::next (9 samples, 0.03%)</title><rect x="1.0411%" y="197" width="0.0289%" height="15" fill="rgb(244,218,35)" fg:x="324" fg:w="9"/><text x="1.2911%" y="207.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (71 samples, 0.23%)</title><rect x="0.8740%" y="469" width="0.2281%" height="15" fill="rgb(240,68,47)" fg:x="272" fg:w="71"/><text x="1.1240%" y="479.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (71 samples, 0.23%)</title><rect x="0.8740%" y="453" width="0.2281%" height="15" fill="rgb(210,16,53)" fg:x="272" fg:w="71"/><text x="1.1240%" y="463.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (71 samples, 0.23%)</title><rect x="0.8740%" y="437" width="0.2281%" height="15" fill="rgb(235,124,12)" fg:x="272" fg:w="71"/><text x="1.1240%" y="447.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (71 samples, 0.23%)</title><rect x="0.8740%" y="421" width="0.2281%" height="15" fill="rgb(224,169,11)" fg:x="272" fg:w="71"/><text x="1.1240%" y="431.50"></text></g><g><title>std::panicking::try (69 samples, 0.22%)</title><rect x="0.8805%" y="405" width="0.2217%" height="15" fill="rgb(250,166,2)" fg:x="274" fg:w="69"/><text x="1.1305%" y="415.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (69 samples, 0.22%)</title><rect x="0.8805%" y="389" width="0.2217%" height="15" fill="rgb(242,216,29)" fg:x="274" fg:w="69"/><text x="1.1305%" y="399.50"></text></g><g><title>rayon_core::registry::in_worker (69 samples, 0.22%)</title><rect x="0.8805%" y="373" width="0.2217%" height="15" fill="rgb(230,116,27)" fg:x="274" fg:w="69"/><text x="1.1305%" y="383.50"></text></g><g><title>std::panicking::try (36 samples, 0.12%)</title><rect x="0.9865%" y="357" width="0.1157%" height="15" fill="rgb(228,99,48)" fg:x="307" fg:w="36"/><text x="1.2365%" y="367.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (36 samples, 0.12%)</title><rect x="0.9865%" y="341" width="0.1157%" height="15" fill="rgb(253,11,6)" fg:x="307" fg:w="36"/><text x="1.2365%" y="351.50"></text></g><g><title>rayon_core::registry::in_worker (36 samples, 0.12%)</title><rect x="0.9865%" y="325" width="0.1157%" height="15" fill="rgb(247,143,39)" fg:x="307" fg:w="36"/><text x="1.2365%" y="335.50"></text></g><g><title>std::panicking::try (19 samples, 0.06%)</title><rect x="1.0411%" y="309" width="0.0611%" height="15" fill="rgb(236,97,10)" fg:x="324" fg:w="19"/><text x="1.2911%" y="319.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (19 samples, 0.06%)</title><rect x="1.0411%" y="293" width="0.0611%" height="15" fill="rgb(233,208,19)" fg:x="324" fg:w="19"/><text x="1.2911%" y="303.50"></text></g><g><title>rayon_core::registry::in_worker (19 samples, 0.06%)</title><rect x="1.0411%" y="277" width="0.0611%" height="15" fill="rgb(216,164,2)" fg:x="324" fg:w="19"/><text x="1.2911%" y="287.50"></text></g><g><title>std::panicking::try (10 samples, 0.03%)</title><rect x="1.0701%" y="261" width="0.0321%" height="15" fill="rgb(220,129,5)" fg:x="333" fg:w="10"/><text x="1.3201%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (10 samples, 0.03%)</title><rect x="1.0701%" y="245" width="0.0321%" height="15" fill="rgb(242,17,10)" fg:x="333" fg:w="10"/><text x="1.3201%" y="255.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (10 samples, 0.03%)</title><rect x="1.0701%" y="229" width="0.0321%" height="15" fill="rgb(242,107,0)" fg:x="333" fg:w="10"/><text x="1.3201%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (10 samples, 0.03%)</title><rect x="1.0701%" y="213" width="0.0321%" height="15" fill="rgb(251,28,31)" fg:x="333" fg:w="10"/><text x="1.3201%" y="223.50"></text></g><g><title>criterion::stats::bivariate::resamples::Resamples&lt;X,Y&gt;::next (8 samples, 0.03%)</title><rect x="1.0765%" y="197" width="0.0257%" height="15" fill="rgb(233,223,10)" fg:x="335" fg:w="8"/><text x="1.3265%" y="207.50"></text></g><g><title>criterion::analysis::estimates::stats (34 samples, 0.11%)</title><rect x="1.1022%" y="293" width="0.1093%" height="15" fill="rgb(215,21,27)" fg:x="343" fg:w="34"/><text x="1.3522%" y="303.50"></text></g><g><title>rayon::slice::quicksort::recurse (25 samples, 0.08%)</title><rect x="1.1311%" y="277" width="0.0803%" height="15" fill="rgb(232,23,21)" fg:x="352" fg:w="25"/><text x="1.3811%" y="287.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (46 samples, 0.15%)</title><rect x="1.1022%" y="357" width="0.1478%" height="15" fill="rgb(244,5,23)" fg:x="343" fg:w="46"/><text x="1.3522%" y="367.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (46 samples, 0.15%)</title><rect x="1.1022%" y="341" width="0.1478%" height="15" fill="rgb(226,81,46)" fg:x="343" fg:w="46"/><text x="1.3522%" y="351.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (46 samples, 0.15%)</title><rect x="1.1022%" y="325" width="0.1478%" height="15" fill="rgb(247,70,30)" fg:x="343" fg:w="46"/><text x="1.3522%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (46 samples, 0.15%)</title><rect x="1.1022%" y="309" width="0.1478%" height="15" fill="rgb(212,68,19)" fg:x="343" fg:w="46"/><text x="1.3522%" y="319.50"></text></g><g><title>criterion::stats::univariate::resamples::Resamples&lt;A&gt;::next (12 samples, 0.04%)</title><rect x="1.2114%" y="293" width="0.0386%" height="15" fill="rgb(240,187,13)" fg:x="377" fg:w="12"/><text x="1.4614%" y="303.50"></text></g><g><title>criterion::analysis::estimates::stats (33 samples, 0.11%)</title><rect x="1.2532%" y="293" width="0.1060%" height="15" fill="rgb(223,113,26)" fg:x="390" fg:w="33"/><text x="1.5032%" y="303.50"></text></g><g><title>rayon::slice::quicksort::recurse (24 samples, 0.08%)</title><rect x="1.2821%" y="277" width="0.0771%" height="15" fill="rgb(206,192,2)" fg:x="399" fg:w="24"/><text x="1.5321%" y="287.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (89 samples, 0.29%)</title><rect x="1.1022%" y="405" width="0.2860%" height="15" fill="rgb(241,108,4)" fg:x="343" fg:w="89"/><text x="1.3522%" y="415.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (89 samples, 0.29%)</title><rect x="1.1022%" y="389" width="0.2860%" height="15" fill="rgb(247,173,49)" fg:x="343" fg:w="89"/><text x="1.3522%" y="399.50"></text></g><g><title>rayon_core::registry::in_worker (89 samples, 0.29%)</title><rect x="1.1022%" y="373" width="0.2860%" height="15" fill="rgb(224,114,35)" fg:x="343" fg:w="89"/><text x="1.3522%" y="383.50"></text></g><g><title>std::panicking::try (43 samples, 0.14%)</title><rect x="1.2500%" y="357" width="0.1382%" height="15" fill="rgb(245,159,27)" fg:x="389" fg:w="43"/><text x="1.5000%" y="367.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (43 samples, 0.14%)</title><rect x="1.2500%" y="341" width="0.1382%" height="15" fill="rgb(245,172,44)" fg:x="389" fg:w="43"/><text x="1.5000%" y="351.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (43 samples, 0.14%)</title><rect x="1.2500%" y="325" width="0.1382%" height="15" fill="rgb(236,23,11)" fg:x="389" fg:w="43"/><text x="1.5000%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (43 samples, 0.14%)</title><rect x="1.2500%" y="309" width="0.1382%" height="15" fill="rgb(205,117,38)" fg:x="389" fg:w="43"/><text x="1.5000%" y="319.50"></text></g><g><title>criterion::stats::univariate::resamples::Resamples&lt;A&gt;::next (9 samples, 0.03%)</title><rect x="1.3593%" y="293" width="0.0289%" height="15" fill="rgb(237,72,25)" fg:x="423" fg:w="9"/><text x="1.6093%" y="303.50"></text></g><g><title>criterion::analysis::estimates::stats (34 samples, 0.11%)</title><rect x="1.3882%" y="293" width="0.1093%" height="15" fill="rgb(244,70,9)" fg:x="432" fg:w="34"/><text x="1.6382%" y="303.50"></text></g><g><title>rayon::slice::quicksort::recurse (30 samples, 0.10%)</title><rect x="1.4010%" y="277" width="0.0964%" height="15" fill="rgb(217,125,39)" fg:x="436" fg:w="30"/><text x="1.6510%" y="287.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (45 samples, 0.14%)</title><rect x="1.3882%" y="357" width="0.1446%" height="15" fill="rgb(235,36,10)" fg:x="432" fg:w="45"/><text x="1.6382%" y="367.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (45 samples, 0.14%)</title><rect x="1.3882%" y="341" width="0.1446%" height="15" fill="rgb(251,123,47)" fg:x="432" fg:w="45"/><text x="1.6382%" y="351.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (45 samples, 0.14%)</title><rect x="1.3882%" y="325" width="0.1446%" height="15" fill="rgb(221,13,13)" fg:x="432" fg:w="45"/><text x="1.6382%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (45 samples, 0.14%)</title><rect x="1.3882%" y="309" width="0.1446%" height="15" fill="rgb(238,131,9)" fg:x="432" fg:w="45"/><text x="1.6382%" y="319.50"></text></g><g><title>criterion::stats::univariate::resamples::Resamples&lt;A&gt;::next (11 samples, 0.04%)</title><rect x="1.4974%" y="293" width="0.0353%" height="15" fill="rgb(211,50,8)" fg:x="466" fg:w="11"/><text x="1.7474%" y="303.50"></text></g><g><title>criterion::analysis::estimates::stats (33 samples, 0.11%)</title><rect x="1.5360%" y="293" width="0.1060%" height="15" fill="rgb(245,182,24)" fg:x="478" fg:w="33"/><text x="1.7860%" y="303.50"></text></g><g><title>rayon::slice::quicksort::recurse (24 samples, 0.08%)</title><rect x="1.5649%" y="277" width="0.0771%" height="15" fill="rgb(242,14,37)" fg:x="487" fg:w="24"/><text x="1.8149%" y="287.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (178 samples, 0.57%)</title><rect x="1.1022%" y="453" width="0.5720%" height="15" fill="rgb(246,228,12)" fg:x="343" fg:w="178"/><text x="1.3522%" y="463.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (178 samples, 0.57%)</title><rect x="1.1022%" y="437" width="0.5720%" height="15" fill="rgb(213,55,15)" fg:x="343" fg:w="178"/><text x="1.3522%" y="447.50"></text></g><g><title>rayon_core::registry::in_worker (178 samples, 0.57%)</title><rect x="1.1022%" y="421" width="0.5720%" height="15" fill="rgb(209,9,3)" fg:x="343" fg:w="178"/><text x="1.3522%" y="431.50"></text></g><g><title>std::panicking::try (89 samples, 0.29%)</title><rect x="1.3882%" y="405" width="0.2860%" height="15" fill="rgb(230,59,30)" fg:x="432" fg:w="89"/><text x="1.6382%" y="415.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (89 samples, 0.29%)</title><rect x="1.3882%" y="389" width="0.2860%" height="15" fill="rgb(209,121,21)" fg:x="432" fg:w="89"/><text x="1.6382%" y="399.50"></text></g><g><title>rayon_core::registry::in_worker (89 samples, 0.29%)</title><rect x="1.3882%" y="373" width="0.2860%" height="15" fill="rgb(220,109,13)" fg:x="432" fg:w="89"/><text x="1.6382%" y="383.50"></text></g><g><title>std::panicking::try (44 samples, 0.14%)</title><rect x="1.5328%" y="357" width="0.1414%" height="15" fill="rgb(232,18,1)" fg:x="477" fg:w="44"/><text x="1.7828%" y="367.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (44 samples, 0.14%)</title><rect x="1.5328%" y="341" width="0.1414%" height="15" fill="rgb(215,41,42)" fg:x="477" fg:w="44"/><text x="1.7828%" y="351.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (44 samples, 0.14%)</title><rect x="1.5328%" y="325" width="0.1414%" height="15" fill="rgb(224,123,36)" fg:x="477" fg:w="44"/><text x="1.7828%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (44 samples, 0.14%)</title><rect x="1.5328%" y="309" width="0.1414%" height="15" fill="rgb(240,125,3)" fg:x="477" fg:w="44"/><text x="1.7828%" y="319.50"></text></g><g><title>criterion::stats::univariate::resamples::Resamples&lt;A&gt;::next (10 samples, 0.03%)</title><rect x="1.6420%" y="293" width="0.0321%" height="15" fill="rgb(205,98,50)" fg:x="511" fg:w="10"/><text x="1.8920%" y="303.50"></text></g><g><title>criterion::analysis::estimates::stats (36 samples, 0.12%)</title><rect x="1.6774%" y="293" width="0.1157%" height="15" fill="rgb(205,185,37)" fg:x="522" fg:w="36"/><text x="1.9274%" y="303.50"></text></g><g><title>rayon::slice::quicksort::recurse (26 samples, 0.08%)</title><rect x="1.7095%" y="277" width="0.0835%" height="15" fill="rgb(238,207,15)" fg:x="532" fg:w="26"/><text x="1.9595%" y="287.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (50 samples, 0.16%)</title><rect x="1.6742%" y="357" width="0.1607%" height="15" fill="rgb(213,199,42)" fg:x="521" fg:w="50"/><text x="1.9242%" y="367.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (50 samples, 0.16%)</title><rect x="1.6742%" y="341" width="0.1607%" height="15" fill="rgb(235,201,11)" fg:x="521" fg:w="50"/><text x="1.9242%" y="351.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (50 samples, 0.16%)</title><rect x="1.6742%" y="325" width="0.1607%" height="15" fill="rgb(207,46,11)" fg:x="521" fg:w="50"/><text x="1.9242%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (50 samples, 0.16%)</title><rect x="1.6742%" y="309" width="0.1607%" height="15" fill="rgb(241,35,35)" fg:x="521" fg:w="50"/><text x="1.9242%" y="319.50"></text></g><g><title>criterion::stats::univariate::resamples::Resamples&lt;A&gt;::next (13 samples, 0.04%)</title><rect x="1.7931%" y="293" width="0.0418%" height="15" fill="rgb(243,32,47)" fg:x="558" fg:w="13"/><text x="2.0431%" y="303.50"></text></g><g><title>criterion::analysis::estimates::stats (25 samples, 0.08%)</title><rect x="1.8348%" y="293" width="0.0803%" height="15" fill="rgb(247,202,23)" fg:x="571" fg:w="25"/><text x="2.0848%" y="303.50"></text></g><g><title>rayon::slice::quicksort::recurse (23 samples, 0.07%)</title><rect x="1.8413%" y="277" width="0.0739%" height="15" fill="rgb(219,102,11)" fg:x="573" fg:w="23"/><text x="2.0913%" y="287.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (93 samples, 0.30%)</title><rect x="1.6742%" y="405" width="0.2988%" height="15" fill="rgb(243,110,44)" fg:x="521" fg:w="93"/><text x="1.9242%" y="415.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (93 samples, 0.30%)</title><rect x="1.6742%" y="389" width="0.2988%" height="15" fill="rgb(222,74,54)" fg:x="521" fg:w="93"/><text x="1.9242%" y="399.50"></text></g><g><title>rayon_core::registry::in_worker (93 samples, 0.30%)</title><rect x="1.6742%" y="373" width="0.2988%" height="15" fill="rgb(216,99,12)" fg:x="521" fg:w="93"/><text x="1.9242%" y="383.50"></text></g><g><title>std::panicking::try (43 samples, 0.14%)</title><rect x="1.8348%" y="357" width="0.1382%" height="15" fill="rgb(226,22,26)" fg:x="571" fg:w="43"/><text x="2.0848%" y="367.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (43 samples, 0.14%)</title><rect x="1.8348%" y="341" width="0.1382%" height="15" fill="rgb(217,163,10)" fg:x="571" fg:w="43"/><text x="2.0848%" y="351.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (43 samples, 0.14%)</title><rect x="1.8348%" y="325" width="0.1382%" height="15" fill="rgb(213,25,53)" fg:x="571" fg:w="43"/><text x="2.0848%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (43 samples, 0.14%)</title><rect x="1.8348%" y="309" width="0.1382%" height="15" fill="rgb(252,105,26)" fg:x="571" fg:w="43"/><text x="2.0848%" y="319.50"></text></g><g><title>criterion::stats::univariate::resamples::Resamples&lt;A&gt;::next (18 samples, 0.06%)</title><rect x="1.9152%" y="293" width="0.0578%" height="15" fill="rgb(220,39,43)" fg:x="596" fg:w="18"/><text x="2.1652%" y="303.50"></text></g><g><title>criterion::analysis::estimates::stats (38 samples, 0.12%)</title><rect x="1.9730%" y="293" width="0.1221%" height="15" fill="rgb(229,68,48)" fg:x="614" fg:w="38"/><text x="2.2230%" y="303.50"></text></g><g><title>rayon::slice::quicksort::recurse (30 samples, 0.10%)</title><rect x="1.9987%" y="277" width="0.0964%" height="15" fill="rgb(252,8,32)" fg:x="622" fg:w="30"/><text x="2.2487%" y="287.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (45 samples, 0.14%)</title><rect x="1.9730%" y="357" width="0.1446%" height="15" fill="rgb(223,20,43)" fg:x="614" fg:w="45"/><text x="2.2230%" y="367.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (45 samples, 0.14%)</title><rect x="1.9730%" y="341" width="0.1446%" height="15" fill="rgb(229,81,49)" fg:x="614" fg:w="45"/><text x="2.2230%" y="351.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (45 samples, 0.14%)</title><rect x="1.9730%" y="325" width="0.1446%" height="15" fill="rgb(236,28,36)" fg:x="614" fg:w="45"/><text x="2.2230%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (45 samples, 0.14%)</title><rect x="1.9730%" y="309" width="0.1446%" height="15" fill="rgb(249,185,26)" fg:x="614" fg:w="45"/><text x="2.2230%" y="319.50"></text></g><g><title>criterion::stats::univariate::resamples::Resamples&lt;A&gt;::next (7 samples, 0.02%)</title><rect x="2.0951%" y="293" width="0.0225%" height="15" fill="rgb(249,174,33)" fg:x="652" fg:w="7"/><text x="2.3451%" y="303.50"></text></g><g><title>criterion::analysis::estimates::stats (12 samples, 0.04%)</title><rect x="2.1176%" y="293" width="0.0386%" height="15" fill="rgb(233,201,37)" fg:x="659" fg:w="12"/><text x="2.3676%" y="303.50"></text></g><g><title>rayon_core::registry::in_worker (336 samples, 1.08%)</title><rect x="1.1022%" y="469" width="1.0797%" height="15" fill="rgb(221,78,26)" fg:x="343" fg:w="336"/><text x="1.3522%" y="479.50"></text></g><g><title>std::panicking::try (158 samples, 0.51%)</title><rect x="1.6742%" y="453" width="0.5077%" height="15" fill="rgb(250,127,30)" fg:x="521" fg:w="158"/><text x="1.9242%" y="463.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (158 samples, 0.51%)</title><rect x="1.6742%" y="437" width="0.5077%" height="15" fill="rgb(230,49,44)" fg:x="521" fg:w="158"/><text x="1.9242%" y="447.50"></text></g><g><title>rayon_core::registry::in_worker (158 samples, 0.51%)</title><rect x="1.6742%" y="421" width="0.5077%" height="15" fill="rgb(229,67,23)" fg:x="521" fg:w="158"/><text x="1.9242%" y="431.50"></text></g><g><title>std::panicking::try (65 samples, 0.21%)</title><rect x="1.9730%" y="405" width="0.2089%" height="15" fill="rgb(249,83,47)" fg:x="614" fg:w="65"/><text x="2.2230%" y="415.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (65 samples, 0.21%)</title><rect x="1.9730%" y="389" width="0.2089%" height="15" fill="rgb(215,43,3)" fg:x="614" fg:w="65"/><text x="2.2230%" y="399.50"></text></g><g><title>rayon_core::registry::in_worker (65 samples, 0.21%)</title><rect x="1.9730%" y="373" width="0.2089%" height="15" fill="rgb(238,154,13)" fg:x="614" fg:w="65"/><text x="2.2230%" y="383.50"></text></g><g><title>std::panicking::try (20 samples, 0.06%)</title><rect x="2.1176%" y="357" width="0.0643%" height="15" fill="rgb(219,56,2)" fg:x="659" fg:w="20"/><text x="2.3676%" y="367.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (20 samples, 0.06%)</title><rect x="2.1176%" y="341" width="0.0643%" height="15" fill="rgb(233,0,4)" fg:x="659" fg:w="20"/><text x="2.3676%" y="351.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (20 samples, 0.06%)</title><rect x="2.1176%" y="325" width="0.0643%" height="15" fill="rgb(235,30,7)" fg:x="659" fg:w="20"/><text x="2.3676%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (20 samples, 0.06%)</title><rect x="2.1176%" y="309" width="0.0643%" height="15" fill="rgb(250,79,13)" fg:x="659" fg:w="20"/><text x="2.3676%" y="319.50"></text></g><g><title>criterion::stats::univariate::resamples::Resamples&lt;A&gt;::next (8 samples, 0.03%)</title><rect x="2.1562%" y="293" width="0.0257%" height="15" fill="rgb(211,146,34)" fg:x="671" fg:w="8"/><text x="2.4062%" y="303.50"></text></g><g><title>std::panicking::try (21 samples, 0.07%)</title><rect x="2.1851%" y="469" width="0.0675%" height="15" fill="rgb(228,22,38)" fg:x="680" fg:w="21"/><text x="2.4351%" y="479.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (21 samples, 0.07%)</title><rect x="2.1851%" y="453" width="0.0675%" height="15" fill="rgb(235,168,5)" fg:x="680" fg:w="21"/><text x="2.4351%" y="463.50"></text></g><g><title>rayon_core::registry::in_worker (21 samples, 0.07%)</title><rect x="2.1851%" y="437" width="0.0675%" height="15" fill="rgb(221,155,16)" fg:x="680" fg:w="21"/><text x="2.4351%" y="447.50"></text></g><g><title>std::panicking::try (21 samples, 0.07%)</title><rect x="2.1851%" y="421" width="0.0675%" height="15" fill="rgb(215,215,53)" fg:x="680" fg:w="21"/><text x="2.4351%" y="431.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (21 samples, 0.07%)</title><rect x="2.1851%" y="405" width="0.0675%" height="15" fill="rgb(223,4,10)" fg:x="680" fg:w="21"/><text x="2.4351%" y="415.50"></text></g><g><title>rayon_core::registry::in_worker (21 samples, 0.07%)</title><rect x="2.1851%" y="389" width="0.0675%" height="15" fill="rgb(234,103,6)" fg:x="680" fg:w="21"/><text x="2.4351%" y="399.50"></text></g><g><title>std::panicking::try (21 samples, 0.07%)</title><rect x="2.1851%" y="373" width="0.0675%" height="15" fill="rgb(227,97,0)" fg:x="680" fg:w="21"/><text x="2.4351%" y="383.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (21 samples, 0.07%)</title><rect x="2.1851%" y="357" width="0.0675%" height="15" fill="rgb(234,150,53)" fg:x="680" fg:w="21"/><text x="2.4351%" y="367.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (21 samples, 0.07%)</title><rect x="2.1851%" y="341" width="0.0675%" height="15" fill="rgb(228,201,54)" fg:x="680" fg:w="21"/><text x="2.4351%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (21 samples, 0.07%)</title><rect x="2.1851%" y="325" width="0.0675%" height="15" fill="rgb(222,22,37)" fg:x="680" fg:w="21"/><text x="2.4351%" y="335.50"></text></g><g><title>criterion::analysis::estimates::stats (21 samples, 0.07%)</title><rect x="2.1851%" y="309" width="0.0675%" height="15" fill="rgb(237,53,32)" fg:x="680" fg:w="21"/><text x="2.4351%" y="319.50"></text></g><g><title>rayon::slice::quicksort::recurse (21 samples, 0.07%)</title><rect x="2.1851%" y="293" width="0.0675%" height="15" fill="rgb(233,25,53)" fg:x="680" fg:w="21"/><text x="2.4351%" y="303.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (5 samples, 0.02%)</title><rect x="2.2558%" y="341" width="0.0161%" height="15" fill="rgb(210,40,34)" fg:x="702" fg:w="5"/><text x="2.5058%" y="351.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (5 samples, 0.02%)</title><rect x="2.2558%" y="325" width="0.0161%" height="15" fill="rgb(241,220,44)" fg:x="702" fg:w="5"/><text x="2.5058%" y="335.50"></text></g><g><title>rayon_core::registry::in_worker (5 samples, 0.02%)</title><rect x="2.2558%" y="309" width="0.0161%" height="15" fill="rgb(235,28,35)" fg:x="702" fg:w="5"/><text x="2.5058%" y="319.50"></text></g><g><title>[unknown] (709 samples, 2.28%)</title><rect x="0.0000%" y="485" width="2.2783%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="709"/><text x="0.2500%" y="495.50">[..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7 samples, 0.02%)</title><rect x="2.2558%" y="469" width="0.0225%" height="15" fill="rgb(224,130,29)" fg:x="702" fg:w="7"/><text x="2.5058%" y="479.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (7 samples, 0.02%)</title><rect x="2.2558%" y="453" width="0.0225%" height="15" fill="rgb(235,212,8)" fg:x="702" fg:w="7"/><text x="2.5058%" y="463.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (7 samples, 0.02%)</title><rect x="2.2558%" y="437" width="0.0225%" height="15" fill="rgb(223,33,50)" fg:x="702" fg:w="7"/><text x="2.5058%" y="447.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (7 samples, 0.02%)</title><rect x="2.2558%" y="421" width="0.0225%" height="15" fill="rgb(219,149,13)" fg:x="702" fg:w="7"/><text x="2.5058%" y="431.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7 samples, 0.02%)</title><rect x="2.2558%" y="405" width="0.0225%" height="15" fill="rgb(250,156,29)" fg:x="702" fg:w="7"/><text x="2.5058%" y="415.50"></text></g><g><title>std::panicking::try (7 samples, 0.02%)</title><rect x="2.2558%" y="389" width="0.0225%" height="15" fill="rgb(216,193,19)" fg:x="702" fg:w="7"/><text x="2.5058%" y="399.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (7 samples, 0.02%)</title><rect x="2.2558%" y="373" width="0.0225%" height="15" fill="rgb(216,135,14)" fg:x="702" fg:w="7"/><text x="2.5058%" y="383.50"></text></g><g><title>rayon_core::registry::in_worker (7 samples, 0.02%)</title><rect x="2.2558%" y="357" width="0.0225%" height="15" fill="rgb(241,47,5)" fg:x="702" fg:w="7"/><text x="2.5058%" y="367.50"></text></g><g><title>[libc-2.31.so] (222 samples, 0.71%)</title><rect x="6.7256%" y="117" width="0.7134%" height="15" fill="rgb(233,42,35)" fg:x="2093" fg:w="222"/><text x="6.9756%" y="127.50"></text></g><g><title>__rdl_dealloc (15 samples, 0.05%)</title><rect x="7.4389%" y="117" width="0.0482%" height="15" fill="rgb(231,13,6)" fg:x="2315" fg:w="15"/><text x="7.6889%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (15 samples, 0.05%)</title><rect x="7.4389%" y="101" width="0.0482%" height="15" fill="rgb(207,181,40)" fg:x="2315" fg:w="15"/><text x="7.6889%" y="111.50"></text></g><g><title>__rust_dealloc (27 samples, 0.09%)</title><rect x="7.4871%" y="117" width="0.0868%" height="15" fill="rgb(254,173,49)" fg:x="2330" fg:w="27"/><text x="7.7371%" y="127.50"></text></g><g><title>__libc_malloc (205 samples, 0.66%)</title><rect x="8.5283%" y="85" width="0.6587%" height="15" fill="rgb(221,1,38)" fg:x="2654" fg:w="205"/><text x="8.7783%" y="95.50"></text></g><g><title>__rdl_alloc (29 samples, 0.09%)</title><rect x="9.1870%" y="85" width="0.0932%" height="15" fill="rgb(206,124,46)" fg:x="2859" fg:w="29"/><text x="9.4370%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (16 samples, 0.05%)</title><rect x="9.2288%" y="69" width="0.0514%" height="15" fill="rgb(249,21,11)" fg:x="2872" fg:w="16"/><text x="9.4788%" y="79.50"></text></g><g><title>__rust_alloc (11 samples, 0.04%)</title><rect x="9.2802%" y="85" width="0.0353%" height="15" fill="rgb(222,201,40)" fg:x="2888" fg:w="11"/><text x="9.5302%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (562 samples, 1.81%)</title><rect x="7.5739%" y="117" width="1.8059%" height="15" fill="rgb(235,61,29)" fg:x="2357" fg:w="562"/><text x="7.8239%" y="127.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (393 samples, 1.26%)</title><rect x="8.1170%" y="101" width="1.2629%" height="15" fill="rgb(219,207,3)" fg:x="2526" fg:w="393"/><text x="8.3670%" y="111.50"></text></g><g><title>realloc (20 samples, 0.06%)</title><rect x="9.3156%" y="85" width="0.0643%" height="15" fill="rgb(222,56,46)" fg:x="2899" fg:w="20"/><text x="9.5656%" y="95.50"></text></g><g><title>[libc-2.31.so] (19 samples, 0.06%)</title><rect x="9.3188%" y="69" width="0.0611%" height="15" fill="rgb(239,76,54)" fg:x="2900" fg:w="19"/><text x="9.5688%" y="79.50"></text></g><g><title>[libc-2.31.so] (19 samples, 0.06%)</title><rect x="9.3188%" y="53" width="0.0611%" height="15" fill="rgb(231,124,27)" fg:x="2900" fg:w="19"/><text x="9.5688%" y="63.50"></text></g><g><title>cfree (87 samples, 0.28%)</title><rect x="9.3798%" y="117" width="0.2796%" height="15" fill="rgb(249,195,6)" fg:x="2919" fg:w="87"/><text x="9.6298%" y="127.50"></text></g><g><title>[libc-2.31.so] (7 samples, 0.02%)</title><rect x="9.6594%" y="101" width="0.0225%" height="15" fill="rgb(237,174,47)" fg:x="3006" fg:w="7"/><text x="9.9094%" y="111.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::default (9 samples, 0.03%)</title><rect x="9.6594%" y="117" width="0.0289%" height="15" fill="rgb(206,201,31)" fg:x="3006" fg:w="9"/><text x="9.9094%" y="127.50"></text></g><g><title>adventofcode_rust_2021::util::array2_to_graph4 (4,882 samples, 15.69%)</title><rect x="2.2976%" y="133" width="15.6877%" height="15" fill="rgb(231,57,52)" fg:x="715" fg:w="4882"/><text x="2.5476%" y="143.50">adventofcode_rust_2021::..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (2,582 samples, 8.30%)</title><rect x="9.6883%" y="117" width="8.2969%" height="15" fill="rgb(248,177,22)" fg:x="3015" fg:w="2582"/><text x="9.9383%" y="127.50">petgraph::gr..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (749 samples, 2.41%)</title><rect x="15.5784%" y="101" width="2.4068%" height="15" fill="rgb(215,211,37)" fg:x="4848" fg:w="749"/><text x="15.8284%" y="111.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (749 samples, 2.41%)</title><rect x="15.5784%" y="85" width="2.4068%" height="15" fill="rgb(241,128,51)" fg:x="4848" fg:w="749"/><text x="15.8284%" y="95.50">al..</text></g><g><title>realloc (748 samples, 2.40%)</title><rect x="15.5816%" y="69" width="2.4036%" height="15" fill="rgb(227,165,31)" fg:x="4849" fg:w="748"/><text x="15.8316%" y="79.50">re..</text></g><g><title>[libc-2.31.so] (745 samples, 2.39%)</title><rect x="15.5913%" y="53" width="2.3940%" height="15" fill="rgb(228,167,24)" fg:x="4852" fg:w="745"/><text x="15.8413%" y="63.50">[l..</text></g><g><title>[libc-2.31.so] (743 samples, 2.39%)</title><rect x="15.5977%" y="37" width="2.3875%" height="15" fill="rgb(228,143,12)" fg:x="4854" fg:w="743"/><text x="15.8477%" y="47.50">[l..</text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (150 samples, 0.48%)</title><rect x="31.7898%" y="117" width="0.4820%" height="15" fill="rgb(249,149,8)" fg:x="9893" fg:w="150"/><text x="32.0398%" y="127.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (1,425 samples, 4.58%)</title><rect x="32.2847%" y="117" width="4.5790%" height="15" fill="rgb(243,35,44)" fg:x="10047" fg:w="1425"/><text x="32.5347%" y="127.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11 samples, 0.04%)</title><rect x="36.8638%" y="117" width="0.0353%" height="15" fill="rgb(246,89,9)" fg:x="11472" fg:w="11"/><text x="37.1138%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 0.04%)</title><rect x="36.8638%" y="101" width="0.0353%" height="15" fill="rgb(233,213,13)" fg:x="11472" fg:w="11"/><text x="37.1138%" y="111.50"></text></g><g><title>realloc (11 samples, 0.04%)</title><rect x="36.8638%" y="85" width="0.0353%" height="15" fill="rgb(233,141,41)" fg:x="11472" fg:w="11"/><text x="37.1138%" y="95.50"></text></g><g><title>[libc-2.31.so] (10 samples, 0.03%)</title><rect x="36.8670%" y="69" width="0.0321%" height="15" fill="rgb(239,167,4)" fg:x="11473" fg:w="10"/><text x="37.1170%" y="79.50"></text></g><g><title>[libc-2.31.so] (10 samples, 0.03%)</title><rect x="36.8670%" y="53" width="0.0321%" height="15" fill="rgb(209,217,16)" fg:x="11473" fg:w="10"/><text x="37.1170%" y="63.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (138 samples, 0.44%)</title><rect x="39.5276%" y="101" width="0.4434%" height="15" fill="rgb(219,88,35)" fg:x="12301" fg:w="138"/><text x="39.7776%" y="111.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (217 samples, 0.70%)</title><rect x="44.6658%" y="69" width="0.6973%" height="15" fill="rgb(220,193,23)" fg:x="13900" fg:w="217"/><text x="44.9158%" y="79.50"></text></g><g><title>[libc-2.31.so] (7 samples, 0.02%)</title><rect x="45.3631%" y="69" width="0.0225%" height="15" fill="rgb(230,90,52)" fg:x="14117" fg:w="7"/><text x="45.6131%" y="79.50"></text></g><g><title>__libc_malloc (4 samples, 0.01%)</title><rect x="45.3856%" y="69" width="0.0129%" height="15" fill="rgb(252,106,19)" fg:x="14124" fg:w="4"/><text x="45.6356%" y="79.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,646 samples, 8.50%)</title><rect x="36.8991%" y="117" width="8.5026%" height="15" fill="rgb(206,74,20)" fg:x="11483" fg:w="2646"/><text x="37.1491%" y="127.50">hashbrown::m..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,690 samples, 5.43%)</title><rect x="39.9711%" y="101" width="5.4306%" height="15" fill="rgb(230,138,44)" fg:x="12439" fg:w="1690"/><text x="40.2211%" y="111.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,281 samples, 4.12%)</title><rect x="41.2853%" y="85" width="4.1163%" height="15" fill="rgb(235,182,43)" fg:x="12848" fg:w="1281"/><text x="41.5353%" y="95.50">hash..</text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (1,072 samples, 3.44%)</title><rect x="72.0855%" y="101" width="3.4447%" height="15" fill="rgb(242,16,51)" fg:x="22433" fg:w="1072"/><text x="72.3355%" y="111.50">&lt;pe..</text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (363 samples, 1.17%)</title><rect x="82.3554%" y="85" width="1.1665%" height="15" fill="rgb(248,9,4)" fg:x="25629" fg:w="363"/><text x="82.6054%" y="95.50"></text></g><g><title>[libc-2.31.so] (26 samples, 0.08%)</title><rect x="83.5219%" y="85" width="0.0835%" height="15" fill="rgb(210,31,22)" fg:x="25992" fg:w="26"/><text x="83.7719%" y="95.50"></text></g><g><title>__libc_malloc (13 samples, 0.04%)</title><rect x="83.6054%" y="85" width="0.0418%" height="15" fill="rgb(239,54,39)" fg:x="26018" fg:w="13"/><text x="83.8554%" y="95.50"></text></g><g><title>[libc-2.31.so] (11 samples, 0.04%)</title><rect x="83.6118%" y="69" width="0.0353%" height="15" fill="rgb(230,99,41)" fg:x="26020" fg:w="11"/><text x="83.8618%" y="79.50"></text></g><g><title>adventofcode_rust_2021::day15::part1 (25,319 samples, 81.36%)</title><rect x="2.2943%" y="149" width="81.3593%" height="15" fill="rgb(253,106,12)" fg:x="714" fg:w="25319"/><text x="2.5443%" y="159.50">adventofcode_rust_2021::day15::part1</text></g><g><title>petgraph::algo::astar::astar (20,436 samples, 65.67%)</title><rect x="17.9852%" y="133" width="65.6684%" height="15" fill="rgb(213,46,41)" fg:x="5597" fg:w="20436"/><text x="18.2352%" y="143.50">petgraph::algo::astar::astar</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (11,904 samples, 38.25%)</title><rect x="45.4017%" y="117" width="38.2519%" height="15" fill="rgb(215,133,35)" fg:x="14129" fg:w="11904"/><text x="45.6517%" y="127.50">hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2,527 samples, 8.12%)</title><rect x="75.5334%" y="101" width="8.1202%" height="15" fill="rgb(213,28,5)" fg:x="23506" fg:w="2527"/><text x="75.7834%" y="111.50">hashbrown::..</text></g><g><title>&lt;adventofcode_rust_2021::day15::day15_part1::RunnerStruct as aoc_runner::Runner&gt;::bench (25,320 samples, 81.36%)</title><rect x="2.2943%" y="165" width="81.3625%" height="15" fill="rgb(215,77,49)" fg:x="714" fg:w="25320"/><text x="2.5443%" y="175.50">&lt;adventofcode_rust_2021::day15::day15_part1::RunnerStruct as aoc_runner::Runner&gt;::bench</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25,322 samples, 81.37%)</title><rect x="2.2911%" y="197" width="81.3689%" height="15" fill="rgb(248,100,22)" fg:x="713" fg:w="25322"/><text x="2.5411%" y="207.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::Bencher::iter (25,322 samples, 81.37%)</title><rect x="2.2911%" y="181" width="81.3689%" height="15" fill="rgb(208,67,9)" fg:x="713" fg:w="25322"/><text x="2.5411%" y="191.50">criterion::Bencher::iter</text></g><g><title>[libc-2.31.so] (53 samples, 0.17%)</title><rect x="84.6272%" y="133" width="0.1703%" height="15" fill="rgb(219,133,21)" fg:x="26336" fg:w="53"/><text x="84.8772%" y="143.50"></text></g><g><title>__libc_malloc (50 samples, 0.16%)</title><rect x="85.0161%" y="101" width="0.1607%" height="15" fill="rgb(246,46,29)" fg:x="26457" fg:w="50"/><text x="85.2661%" y="111.50"></text></g><g><title>__rdl_alloc (8 samples, 0.03%)</title><rect x="85.1767%" y="101" width="0.0257%" height="15" fill="rgb(246,185,52)" fg:x="26507" fg:w="8"/><text x="85.4267%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.01%)</title><rect x="85.1896%" y="85" width="0.0129%" height="15" fill="rgb(252,136,11)" fg:x="26511" fg:w="4"/><text x="85.4396%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (127 samples, 0.41%)</title><rect x="84.8104%" y="133" width="0.4081%" height="15" fill="rgb(219,138,53)" fg:x="26393" fg:w="127"/><text x="85.0604%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (97 samples, 0.31%)</title><rect x="84.9068%" y="117" width="0.3117%" height="15" fill="rgb(211,51,23)" fg:x="26423" fg:w="97"/><text x="85.1568%" y="127.50"></text></g><g><title>__rust_alloc (5 samples, 0.02%)</title><rect x="85.2024%" y="101" width="0.0161%" height="15" fill="rgb(247,221,28)" fg:x="26515" fg:w="5"/><text x="85.4524%" y="111.50"></text></g><g><title>cfree (13 samples, 0.04%)</title><rect x="85.2185%" y="133" width="0.0418%" height="15" fill="rgb(251,222,45)" fg:x="26520" fg:w="13"/><text x="85.4685%" y="143.50"></text></g><g><title>adventofcode_rust_2021::util::array2_to_graph4 (866 samples, 2.78%)</title><rect x="83.6632%" y="149" width="2.7828%" height="15" fill="rgb(217,162,53)" fg:x="26036" fg:w="866"/><text x="83.9132%" y="159.50">ad..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (366 samples, 1.18%)</title><rect x="85.2699%" y="133" width="1.1761%" height="15" fill="rgb(229,93,14)" fg:x="26536" fg:w="366"/><text x="85.5199%" y="143.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (18 samples, 0.06%)</title><rect x="89.1838%" y="133" width="0.0578%" height="15" fill="rgb(209,67,49)" fg:x="27754" fg:w="18"/><text x="89.4338%" y="143.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (318 samples, 1.02%)</title><rect x="89.2481%" y="133" width="1.0219%" height="15" fill="rgb(213,87,29)" fg:x="27774" fg:w="318"/><text x="89.4981%" y="143.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (23 samples, 0.07%)</title><rect x="90.8098%" y="117" width="0.0739%" height="15" fill="rgb(205,151,52)" fg:x="28260" fg:w="23"/><text x="91.0598%" y="127.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (36 samples, 0.12%)</title><rect x="91.8541%" y="85" width="0.1157%" height="15" fill="rgb(253,215,39)" fg:x="28585" fg:w="36"/><text x="92.1041%" y="95.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (529 samples, 1.70%)</title><rect x="90.2763%" y="133" width="1.6999%" height="15" fill="rgb(221,220,41)" fg:x="28094" fg:w="529"/><text x="90.5263%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (340 samples, 1.09%)</title><rect x="90.8837%" y="117" width="1.0925%" height="15" fill="rgb(218,133,21)" fg:x="28283" fg:w="340"/><text x="91.1337%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (250 samples, 0.80%)</title><rect x="91.1729%" y="101" width="0.8033%" height="15" fill="rgb(221,193,43)" fg:x="28373" fg:w="250"/><text x="91.4229%" y="111.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (218 samples, 0.70%)</title><rect x="97.5193%" y="117" width="0.7005%" height="15" fill="rgb(240,128,52)" fg:x="30348" fg:w="218"/><text x="97.7693%" y="127.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (86 samples, 0.28%)</title><rect x="99.4152%" y="101" width="0.2763%" height="15" fill="rgb(253,114,12)" fg:x="30938" fg:w="86"/><text x="99.6652%" y="111.50"></text></g><g><title>std::panic::catch_unwind (30,319 samples, 97.43%)</title><rect x="2.2783%" y="357" width="97.4261%" height="15" fill="rgb(215,223,47)" fg:x="709" fg:w="30319"/><text x="2.5283%" y="367.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (30,319 samples, 97.43%)</title><rect x="2.2783%" y="341" width="97.4261%" height="15" fill="rgb(248,225,23)" fg:x="709" fg:w="30319"/><text x="2.5283%" y="351.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (30,319 samples, 97.43%)</title><rect x="2.2783%" y="325" width="97.4261%" height="15" fill="rgb(250,108,0)" fg:x="709" fg:w="30319"/><text x="2.5283%" y="335.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (30,319 samples, 97.43%)</title><rect x="2.2783%" y="309" width="97.4261%" height="15" fill="rgb(228,208,7)" fg:x="709" fg:w="30319"/><text x="2.5283%" y="319.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (30,319 samples, 97.43%)</title><rect x="2.2783%" y="293" width="97.4261%" height="15" fill="rgb(244,45,10)" fg:x="709" fg:w="30319"/><text x="2.5283%" y="303.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (30,319 samples, 97.43%)</title><rect x="2.2783%" y="277" width="97.4261%" height="15" fill="rgb(207,125,25)" fg:x="709" fg:w="30319"/><text x="2.5283%" y="287.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>aoc_benchmark::main (30,319 samples, 97.43%)</title><rect x="2.2783%" y="261" width="97.4261%" height="15" fill="rgb(210,195,18)" fg:x="709" fg:w="30319"/><text x="2.5283%" y="271.50">aoc_benchmark::main</text></g><g><title>&lt;criterion::benchmark::ParameterizedBenchmark&lt;T&gt; as criterion::benchmark::BenchmarkDefinition&gt;::run (30,319 samples, 97.43%)</title><rect x="2.2783%" y="245" width="97.4261%" height="15" fill="rgb(249,80,12)" fg:x="709" fg:w="30319"/><text x="2.5283%" y="255.50">&lt;criterion::benchmark::ParameterizedBenchmark&lt;T&gt; as criterion::benchmark::BenchmarkDefinition&gt;::run</text></g><g><title>criterion::analysis::common (30,319 samples, 97.43%)</title><rect x="2.2783%" y="229" width="97.4261%" height="15" fill="rgb(221,65,9)" fg:x="709" fg:w="30319"/><text x="2.5283%" y="239.50">criterion::analysis::common</text></g><g><title>criterion::routine::Routine::sample (30,315 samples, 97.41%)</title><rect x="2.2911%" y="213" width="97.4132%" height="15" fill="rgb(235,49,36)" fg:x="713" fg:w="30315"/><text x="2.5411%" y="223.50">criterion::routine::Routine::sample</text></g><g><title>criterion::Bencher::iter (4,993 samples, 16.04%)</title><rect x="83.6600%" y="197" width="16.0443%" height="15" fill="rgb(225,32,20)" fg:x="26035" fg:w="4993"/><text x="83.9100%" y="207.50">criterion::Bencher::iter</text></g><g><title>&lt;adventofcode_rust_2021::day15::day15_part1::RunnerStruct as aoc_runner::Runner&gt;::bench (4,993 samples, 16.04%)</title><rect x="83.6600%" y="181" width="16.0443%" height="15" fill="rgb(215,141,46)" fg:x="26035" fg:w="4993"/><text x="83.9100%" y="191.50">&lt;adventofcode_rust_2021::..</text></g><g><title>adventofcode_rust_2021::day15::part1 (4,993 samples, 16.04%)</title><rect x="83.6600%" y="165" width="16.0443%" height="15" fill="rgb(250,160,47)" fg:x="26035" fg:w="4993"/><text x="83.9100%" y="175.50">adventofcode_rust_2021::d..</text></g><g><title>petgraph::algo::astar::astar (4,126 samples, 13.26%)</title><rect x="86.4460%" y="149" width="13.2584%" height="15" fill="rgb(216,222,40)" fg:x="26902" fg:w="4126"/><text x="86.6960%" y="159.50">petgraph::algo::asta..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,405 samples, 7.73%)</title><rect x="91.9762%" y="133" width="7.7281%" height="15" fill="rgb(234,217,39)" fg:x="28623" fg:w="2405"/><text x="92.2262%" y="143.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (461 samples, 1.48%)</title><rect x="98.2230%" y="117" width="1.4814%" height="15" fill="rgb(207,178,40)" fg:x="30567" fg:w="461"/><text x="98.4730%" y="127.50"></text></g><g><title>_start (30,320 samples, 97.43%)</title><rect x="2.2783%" y="485" width="97.4293%" height="15" fill="rgb(221,136,13)" fg:x="709" fg:w="30320"/><text x="2.5283%" y="495.50">_start</text></g><g><title>__libc_start_main (30,320 samples, 97.43%)</title><rect x="2.2783%" y="469" width="97.4293%" height="15" fill="rgb(249,199,10)" fg:x="709" fg:w="30320"/><text x="2.5283%" y="479.50">__libc_start_main</text></g><g><title>main (30,320 samples, 97.43%)</title><rect x="2.2783%" y="453" width="97.4293%" height="15" fill="rgb(249,222,13)" fg:x="709" fg:w="30320"/><text x="2.5283%" y="463.50">main</text></g><g><title>std::rt::lang_start_internal (30,320 samples, 97.43%)</title><rect x="2.2783%" y="437" width="97.4293%" height="15" fill="rgb(244,185,38)" fg:x="709" fg:w="30320"/><text x="2.5283%" y="447.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (30,320 samples, 97.43%)</title><rect x="2.2783%" y="421" width="97.4293%" height="15" fill="rgb(236,202,9)" fg:x="709" fg:w="30320"/><text x="2.5283%" y="431.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (30,320 samples, 97.43%)</title><rect x="2.2783%" y="405" width="97.4293%" height="15" fill="rgb(250,229,37)" fg:x="709" fg:w="30320"/><text x="2.5283%" y="415.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (30,320 samples, 97.43%)</title><rect x="2.2783%" y="389" width="97.4293%" height="15" fill="rgb(206,174,23)" fg:x="709" fg:w="30320"/><text x="2.5283%" y="399.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (30,320 samples, 97.43%)</title><rect x="2.2783%" y="373" width="97.4293%" height="15" fill="rgb(211,33,43)" fg:x="709" fg:w="30320"/><text x="2.5283%" y="383.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>rayon::slice::quicksort::recurse (4 samples, 0.01%)</title><rect x="99.7076%" y="309" width="0.0129%" height="15" fill="rgb(245,58,50)" fg:x="31029" fg:w="4"/><text x="99.9576%" y="319.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6 samples, 0.02%)</title><rect x="99.7076%" y="325" width="0.0193%" height="15" fill="rgb(244,68,36)" fg:x="31029" fg:w="6"/><text x="99.9576%" y="335.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (10 samples, 0.03%)</title><rect x="99.7269%" y="197" width="0.0321%" height="15" fill="rgb(232,229,15)" fg:x="31035" fg:w="10"/><text x="99.9769%" y="207.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (10 samples, 0.03%)</title><rect x="99.7269%" y="181" width="0.0321%" height="15" fill="rgb(254,30,23)" fg:x="31035" fg:w="10"/><text x="99.9769%" y="191.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (10 samples, 0.03%)</title><rect x="99.7269%" y="165" width="0.0321%" height="15" fill="rgb(235,160,14)" fg:x="31035" fg:w="10"/><text x="99.9769%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (10 samples, 0.03%)</title><rect x="99.7269%" y="149" width="0.0321%" height="15" fill="rgb(212,155,44)" fg:x="31035" fg:w="10"/><text x="99.9769%" y="159.50"></text></g><g><title>criterion::stats::bivariate::resamples::Resamples&lt;X,Y&gt;::next (10 samples, 0.03%)</title><rect x="99.7269%" y="133" width="0.0321%" height="15" fill="rgb(226,2,50)" fg:x="31035" fg:w="10"/><text x="99.9769%" y="143.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (19 samples, 0.06%)</title><rect x="99.7269%" y="245" width="0.0611%" height="15" fill="rgb(234,177,6)" fg:x="31035" fg:w="19"/><text x="99.9769%" y="255.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (19 samples, 0.06%)</title><rect x="99.7269%" y="229" width="0.0611%" height="15" fill="rgb(217,24,9)" fg:x="31035" fg:w="19"/><text x="99.9769%" y="239.50"></text></g><g><title>rayon_core::registry::in_worker (19 samples, 0.06%)</title><rect x="99.7269%" y="213" width="0.0611%" height="15" fill="rgb(220,13,46)" fg:x="31035" fg:w="19"/><text x="99.9769%" y="223.50"></text></g><g><title>std::panicking::try (9 samples, 0.03%)</title><rect x="99.7590%" y="197" width="0.0289%" height="15" fill="rgb(239,221,27)" fg:x="31045" fg:w="9"/><text x="100.0090%" y="207.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (9 samples, 0.03%)</title><rect x="99.7590%" y="181" width="0.0289%" height="15" fill="rgb(222,198,25)" fg:x="31045" fg:w="9"/><text x="100.0090%" y="191.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (9 samples, 0.03%)</title><rect x="99.7590%" y="165" width="0.0289%" height="15" fill="rgb(211,99,13)" fg:x="31045" fg:w="9"/><text x="100.0090%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 0.03%)</title><rect x="99.7590%" y="149" width="0.0289%" height="15" fill="rgb(232,111,31)" fg:x="31045" fg:w="9"/><text x="100.0090%" y="159.50"></text></g><g><title>criterion::stats::bivariate::resamples::Resamples&lt;X,Y&gt;::next (7 samples, 0.02%)</title><rect x="99.7654%" y="133" width="0.0225%" height="15" fill="rgb(245,82,37)" fg:x="31047" fg:w="7"/><text x="100.0154%" y="143.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (10 samples, 0.03%)</title><rect x="99.7879%" y="197" width="0.0321%" height="15" fill="rgb(227,149,46)" fg:x="31054" fg:w="10"/><text x="100.0379%" y="207.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (10 samples, 0.03%)</title><rect x="99.7879%" y="181" width="0.0321%" height="15" fill="rgb(218,36,50)" fg:x="31054" fg:w="10"/><text x="100.0379%" y="191.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (10 samples, 0.03%)</title><rect x="99.7879%" y="165" width="0.0321%" height="15" fill="rgb(226,80,48)" fg:x="31054" fg:w="10"/><text x="100.0379%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (10 samples, 0.03%)</title><rect x="99.7879%" y="149" width="0.0321%" height="15" fill="rgb(238,224,15)" fg:x="31054" fg:w="10"/><text x="100.0379%" y="159.50"></text></g><g><title>criterion::stats::bivariate::resamples::Resamples&lt;X,Y&gt;::next (10 samples, 0.03%)</title><rect x="99.7879%" y="133" width="0.0321%" height="15" fill="rgb(241,136,10)" fg:x="31054" fg:w="10"/><text x="100.0379%" y="143.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (38 samples, 0.12%)</title><rect x="99.7269%" y="293" width="0.1221%" height="15" fill="rgb(208,32,45)" fg:x="31035" fg:w="38"/><text x="99.9769%" y="303.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (38 samples, 0.12%)</title><rect x="99.7269%" y="277" width="0.1221%" height="15" fill="rgb(207,135,9)" fg:x="31035" fg:w="38"/><text x="99.9769%" y="287.50"></text></g><g><title>rayon_core::registry::in_worker (38 samples, 0.12%)</title><rect x="99.7269%" y="261" width="0.1221%" height="15" fill="rgb(206,86,44)" fg:x="31035" fg:w="38"/><text x="99.9769%" y="271.50"></text></g><g><title>std::panicking::try (19 samples, 0.06%)</title><rect x="99.7879%" y="245" width="0.0611%" height="15" fill="rgb(245,177,15)" fg:x="31054" fg:w="19"/><text x="100.0379%" y="255.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (19 samples, 0.06%)</title><rect x="99.7879%" y="229" width="0.0611%" height="15" fill="rgb(206,64,50)" fg:x="31054" fg:w="19"/><text x="100.0379%" y="239.50"></text></g><g><title>rayon_core::registry::in_worker (19 samples, 0.06%)</title><rect x="99.7879%" y="213" width="0.0611%" height="15" fill="rgb(234,36,40)" fg:x="31054" fg:w="19"/><text x="100.0379%" y="223.50"></text></g><g><title>std::panicking::try (9 samples, 0.03%)</title><rect x="99.8201%" y="197" width="0.0289%" height="15" fill="rgb(213,64,8)" fg:x="31064" fg:w="9"/><text x="100.0701%" y="207.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (9 samples, 0.03%)</title><rect x="99.8201%" y="181" width="0.0289%" height="15" fill="rgb(210,75,36)" fg:x="31064" fg:w="9"/><text x="100.0701%" y="191.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (9 samples, 0.03%)</title><rect x="99.8201%" y="165" width="0.0289%" height="15" fill="rgb(229,88,21)" fg:x="31064" fg:w="9"/><text x="100.0701%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 0.03%)</title><rect x="99.8201%" y="149" width="0.0289%" height="15" fill="rgb(252,204,47)" fg:x="31064" fg:w="9"/><text x="100.0701%" y="159.50"></text></g><g><title>criterion::stats::bivariate::resamples::Resamples&lt;X,Y&gt;::next (8 samples, 0.03%)</title><rect x="99.8233%" y="133" width="0.0257%" height="15" fill="rgb(208,77,27)" fg:x="31065" fg:w="8"/><text x="100.0733%" y="143.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (10 samples, 0.03%)</title><rect x="99.8490%" y="197" width="0.0321%" height="15" fill="rgb(221,76,26)" fg:x="31073" fg:w="10"/><text x="100.0990%" y="207.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (10 samples, 0.03%)</title><rect x="99.8490%" y="181" width="0.0321%" height="15" fill="rgb(225,139,18)" fg:x="31073" fg:w="10"/><text x="100.0990%" y="191.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (10 samples, 0.03%)</title><rect x="99.8490%" y="165" width="0.0321%" height="15" fill="rgb(230,137,11)" fg:x="31073" fg:w="10"/><text x="100.0990%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (10 samples, 0.03%)</title><rect x="99.8490%" y="149" width="0.0321%" height="15" fill="rgb(212,28,1)" fg:x="31073" fg:w="10"/><text x="100.0990%" y="159.50"></text></g><g><title>criterion::stats::bivariate::resamples::Resamples&lt;X,Y&gt;::next (9 samples, 0.03%)</title><rect x="99.8522%" y="133" width="0.0289%" height="15" fill="rgb(248,164,17)" fg:x="31074" fg:w="9"/><text x="100.1022%" y="143.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (19 samples, 0.06%)</title><rect x="99.8490%" y="245" width="0.0611%" height="15" fill="rgb(222,171,42)" fg:x="31073" fg:w="19"/><text x="100.0990%" y="255.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (19 samples, 0.06%)</title><rect x="99.8490%" y="229" width="0.0611%" height="15" fill="rgb(243,84,45)" fg:x="31073" fg:w="19"/><text x="100.0990%" y="239.50"></text></g><g><title>rayon_core::registry::in_worker (19 samples, 0.06%)</title><rect x="99.8490%" y="213" width="0.0611%" height="15" fill="rgb(252,49,23)" fg:x="31073" fg:w="19"/><text x="100.0990%" y="223.50"></text></g><g><title>std::panicking::try (9 samples, 0.03%)</title><rect x="99.8811%" y="197" width="0.0289%" height="15" fill="rgb(215,19,7)" fg:x="31083" fg:w="9"/><text x="100.1311%" y="207.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (9 samples, 0.03%)</title><rect x="99.8811%" y="181" width="0.0289%" height="15" fill="rgb(238,81,41)" fg:x="31083" fg:w="9"/><text x="100.1311%" y="191.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (9 samples, 0.03%)</title><rect x="99.8811%" y="165" width="0.0289%" height="15" fill="rgb(210,199,37)" fg:x="31083" fg:w="9"/><text x="100.1311%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 0.03%)</title><rect x="99.8811%" y="149" width="0.0289%" height="15" fill="rgb(244,192,49)" fg:x="31083" fg:w="9"/><text x="100.1311%" y="159.50"></text></g><g><title>criterion::stats::bivariate::resamples::Resamples&lt;X,Y&gt;::next (9 samples, 0.03%)</title><rect x="99.8811%" y="133" width="0.0289%" height="15" fill="rgb(226,211,11)" fg:x="31083" fg:w="9"/><text x="100.1311%" y="143.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (10 samples, 0.03%)</title><rect x="99.9100%" y="197" width="0.0321%" height="15" fill="rgb(236,162,54)" fg:x="31092" fg:w="10"/><text x="100.1600%" y="207.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (10 samples, 0.03%)</title><rect x="99.9100%" y="181" width="0.0321%" height="15" fill="rgb(220,229,9)" fg:x="31092" fg:w="10"/><text x="100.1600%" y="191.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (10 samples, 0.03%)</title><rect x="99.9100%" y="165" width="0.0321%" height="15" fill="rgb(250,87,22)" fg:x="31092" fg:w="10"/><text x="100.1600%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (10 samples, 0.03%)</title><rect x="99.9100%" y="149" width="0.0321%" height="15" fill="rgb(239,43,17)" fg:x="31092" fg:w="10"/><text x="100.1600%" y="159.50"></text></g><g><title>criterion::stats::bivariate::resamples::Resamples&lt;X,Y&gt;::next (6 samples, 0.02%)</title><rect x="99.9229%" y="133" width="0.0193%" height="15" fill="rgb(231,177,25)" fg:x="31096" fg:w="6"/><text x="100.1729%" y="143.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (77 samples, 0.25%)</title><rect x="99.7269%" y="325" width="0.2474%" height="15" fill="rgb(219,179,1)" fg:x="31035" fg:w="77"/><text x="99.9769%" y="335.50"></text></g><g><title>rayon_core::registry::in_worker (77 samples, 0.25%)</title><rect x="99.7269%" y="309" width="0.2474%" height="15" fill="rgb(238,219,53)" fg:x="31035" fg:w="77"/><text x="99.9769%" y="319.50"></text></g><g><title>std::panicking::try (39 samples, 0.13%)</title><rect x="99.8490%" y="293" width="0.1253%" height="15" fill="rgb(232,167,36)" fg:x="31073" fg:w="39"/><text x="100.0990%" y="303.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (39 samples, 0.13%)</title><rect x="99.8490%" y="277" width="0.1253%" height="15" fill="rgb(244,19,51)" fg:x="31073" fg:w="39"/><text x="100.0990%" y="287.50"></text></g><g><title>rayon_core::registry::in_worker (39 samples, 0.13%)</title><rect x="99.8490%" y="261" width="0.1253%" height="15" fill="rgb(224,6,22)" fg:x="31073" fg:w="39"/><text x="100.0990%" y="271.50"></text></g><g><title>std::panicking::try (20 samples, 0.06%)</title><rect x="99.9100%" y="245" width="0.0643%" height="15" fill="rgb(224,145,5)" fg:x="31092" fg:w="20"/><text x="100.1600%" y="255.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (20 samples, 0.06%)</title><rect x="99.9100%" y="229" width="0.0643%" height="15" fill="rgb(234,130,49)" fg:x="31092" fg:w="20"/><text x="100.1600%" y="239.50"></text></g><g><title>rayon_core::registry::in_worker (20 samples, 0.06%)</title><rect x="99.9100%" y="213" width="0.0643%" height="15" fill="rgb(254,6,2)" fg:x="31092" fg:w="20"/><text x="100.1600%" y="223.50"></text></g><g><title>std::panicking::try (10 samples, 0.03%)</title><rect x="99.9422%" y="197" width="0.0321%" height="15" fill="rgb(208,96,46)" fg:x="31102" fg:w="10"/><text x="100.1922%" y="207.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (10 samples, 0.03%)</title><rect x="99.9422%" y="181" width="0.0321%" height="15" fill="rgb(239,3,39)" fg:x="31102" fg:w="10"/><text x="100.1922%" y="191.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (10 samples, 0.03%)</title><rect x="99.9422%" y="165" width="0.0321%" height="15" fill="rgb(233,210,1)" fg:x="31102" fg:w="10"/><text x="100.1922%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (10 samples, 0.03%)</title><rect x="99.9422%" y="149" width="0.0321%" height="15" fill="rgb(244,137,37)" fg:x="31102" fg:w="10"/><text x="100.1922%" y="159.50"></text></g><g><title>criterion::stats::bivariate::resamples::Resamples&lt;X,Y&gt;::next (10 samples, 0.03%)</title><rect x="99.9422%" y="133" width="0.0321%" height="15" fill="rgb(240,136,2)" fg:x="31102" fg:w="10"/><text x="100.1922%" y="143.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (90 samples, 0.29%)</title><rect x="99.7076%" y="341" width="0.2892%" height="15" fill="rgb(239,18,37)" fg:x="31029" fg:w="90"/><text x="99.9576%" y="351.50"></text></g><g><title>rayon::slice::quicksort::recurse (7 samples, 0.02%)</title><rect x="99.9743%" y="325" width="0.0225%" height="15" fill="rgb(218,185,22)" fg:x="31112" fg:w="7"/><text x="100.2243%" y="335.50"></text></g><g><title>rayon_core::registry::in_worker (5 samples, 0.02%)</title><rect x="99.9807%" y="309" width="0.0161%" height="15" fill="rgb(225,218,4)" fg:x="31114" fg:w="5"/><text x="100.2307%" y="319.50"></text></g><g><title>all (31,120 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(230,182,32)" fg:x="0" fg:w="31120"/><text x="0.2500%" y="527.50"></text></g><g><title>aoc_benchmark-f (31,120 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(242,56,43)" fg:x="0" fg:w="31120"/><text x="0.2500%" y="511.50">aoc_benchmark-f</text></g><g><title>clone (91 samples, 0.29%)</title><rect x="99.7076%" y="485" width="0.2924%" height="15" fill="rgb(233,99,24)" fg:x="31029" fg:w="91"/><text x="99.9576%" y="495.50"></text></g><g><title>start_thread (91 samples, 0.29%)</title><rect x="99.7076%" y="469" width="0.2924%" height="15" fill="rgb(234,209,42)" fg:x="31029" fg:w="91"/><text x="99.9576%" y="479.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (91 samples, 0.29%)</title><rect x="99.7076%" y="453" width="0.2924%" height="15" fill="rgb(227,7,12)" fg:x="31029" fg:w="91"/><text x="99.9576%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (91 samples, 0.29%)</title><rect x="99.7076%" y="437" width="0.2924%" height="15" fill="rgb(245,203,43)" fg:x="31029" fg:w="91"/><text x="99.9576%" y="447.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (91 samples, 0.29%)</title><rect x="99.7076%" y="421" width="0.2924%" height="15" fill="rgb(238,205,33)" fg:x="31029" fg:w="91"/><text x="99.9576%" y="431.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (91 samples, 0.29%)</title><rect x="99.7076%" y="405" width="0.2924%" height="15" fill="rgb(231,56,7)" fg:x="31029" fg:w="91"/><text x="99.9576%" y="415.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (91 samples, 0.29%)</title><rect x="99.7076%" y="389" width="0.2924%" height="15" fill="rgb(244,186,29)" fg:x="31029" fg:w="91"/><text x="99.9576%" y="399.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (91 samples, 0.29%)</title><rect x="99.7076%" y="373" width="0.2924%" height="15" fill="rgb(234,111,31)" fg:x="31029" fg:w="91"/><text x="99.9576%" y="383.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (91 samples, 0.29%)</title><rect x="99.7076%" y="357" width="0.2924%" height="15" fill="rgb(241,149,10)" fg:x="31029" fg:w="91"/><text x="99.9576%" y="367.50"></text></g></svg></svg>